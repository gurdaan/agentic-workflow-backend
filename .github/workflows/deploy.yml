name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: jonas.azurecr.io
  CONTAINER_APP_NAME: azure-board-agents-backend
  RESOURCE_GROUP: agenticflow-rg
  IMAGE_NAME: azure-board-agents-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      run: |
        az acr login --name jonas

    - name: Build and push Docker image
      run: |
        # Build the Docker image for linux/amd64 platform
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64 \
          --tag ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --tag ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --push \
          .

    - name: Deploy to Azure Container Apps
      run: |
        # Check if Container App Environment exists, if not create it
        if ! az containerapp env show --name aca-env-azure-board-agents --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
          echo "Creating Container App Environment..."
          az containerapp env create \
            --name aca-env-azure-board-agents \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus
        fi

        # Check if Container App exists, if not create it
        if ! az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
          echo "Creating new Container App..."
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment aca-env-azure-board-agents \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --target-port 8000 \
            --ingress external \
            --min-replicas 0 \
            --max-replicas 10 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --registry-server ${{ env.AZURE_CONTAINER_REGISTRY }}
        else
          echo "Updating existing Container App..."
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        fi

    - name: Configure Environment Variables
      run: |
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --set-env-vars \
            AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            AZURE_OPENAI_DEPLOYMENT="${{ secrets.AZURE_OPENAI_DEPLOYMENT }}" \
            AI_FOUNDRY_ENDPOINT="${{ secrets.AI_FOUNDRY_ENDPOINT }}" \
            AI_FOUNDRY_ASSISTANT_ID="${{ secrets.AI_FOUNDRY_ASSISTANT_ID }}" \
            AI_FOUNDRY_TESTCASES_ASSISTANT_ID="${{ secrets.AI_FOUNDRY_TESTCASES_ASSISTANT_ID }}" \
            AI_FOUNDRY_DEV_TASKS_ASSISTANT_ID="${{ secrets.AI_FOUNDRY_DEV_TASKS_ASSISTANT_ID }}" \
            AZURE_DEVOPS_PAT="${{ secrets.AZURE_DEVOPS_PAT }}" \
            AZURE_DEVOPS_ORGANIZATION_URL="${{ secrets.AZURE_DEVOPS_ORGANIZATION_URL }}" \
            AZURE_DEVOPS_PROJECT="${{ secrets.AZURE_DEVOPS_PROJECT }}" \
            AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            AZURE_STORAGE_CONTAINER_NAME="${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
            PORT="8000"

    - name: Get Container App URL
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        echo "üöÄ Container App URL: https://$APP_URL"
        echo "üê≥ Docker Image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"